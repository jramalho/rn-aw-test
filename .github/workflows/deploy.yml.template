# App Store Deployment Workflow Template
#
# This is a template file. To enable automated deployments:
# 1. Configure required secrets in GitHub repository settings
# 2. Rename this file to `deploy.yml` (remove .template extension)
# 3. Push a tag or manually trigger the workflow
#
# Required Secrets:
# iOS:
#   - APPLE_ID: Apple Developer email
#   - APPLE_APP_SPECIFIC_PASSWORD: From appleid.apple.com
#   - MATCH_PASSWORD: Encryption password for Match certificates
#   - MATCH_GIT_TOKEN: Personal access token for certificates repo
#
# Android:
#   - PLAY_STORE_SERVICE_ACCOUNT_JSON: Service account JSON content
#   - ANDROID_SIGNING_KEY_BASE64: Base64 encoded keystore
#   - ANDROID_KEYSTORE_PASSWORD: Keystore password
#   - ANDROID_KEY_PASSWORD: Key password
#   - ANDROID_KEY_ALIAS: Key alias

name: Deploy to App Stores

on:
  # Trigger on version tags
  push:
    tags:
      - 'v*.*.*'
      - 'ios-v*.*.*'
      - 'android-v*.*.*'
  
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to deploy'
        required: true
        type: choice
        default: 'both'
        options:
          - ios
          - android
          - both
      track:
        description: 'Release track'
        required: true
        type: choice
        default: 'beta'
        options:
          - beta
          - production

jobs:
  deploy-ios:
    name: Deploy iOS
    if: |
      (github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/tags/ios-v'))) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both'))
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Install CocoaPods
        run: cd ios && bundle exec pod install
      
      - name: Setup Match (Code Signing)
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_TOKEN }}
        run: |
          cd ios
          bundle exec fastlane match appstore --readonly
      
      - name: Deploy to TestFlight (Beta)
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.track == 'beta') ||
          (github.event_name == 'push' && !contains(github.ref, 'release'))
        env:
          FASTLANE_APPLE_ID: ${{ secrets.APPLE_ID }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: cd ios && bundle exec fastlane beta
      
      - name: Deploy to App Store (Production)
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.track == 'production') ||
          (github.event_name == 'push' && contains(github.ref, 'release'))
        env:
          FASTLANE_APPLE_ID: ${{ secrets.APPLE_ID }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: cd ios && bundle exec fastlane release
      
      - name: Upload build artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: |
            ios/fastlane/report.xml
            ios/fastlane/test_output

  deploy-android:
    name: Deploy Android
    if: |
      (github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/tags/android-v'))) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Setup Android signing
        env:
          ANDROID_SIGNING_KEY: ${{ secrets.ANDROID_SIGNING_KEY_BASE64 }}
        run: |
          echo "$ANDROID_SIGNING_KEY" | base64 -d > android/app/rnawtest-release.keystore
      
      - name: Configure gradle properties
        env:
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        run: |
          cat >> android/gradle.properties << EOF
          MYAPP_RELEASE_STORE_FILE=rnawtest-release.keystore
          MYAPP_RELEASE_KEY_ALIAS=$KEY_ALIAS
          MYAPP_RELEASE_STORE_PASSWORD=$KEYSTORE_PASSWORD
          MYAPP_RELEASE_KEY_PASSWORD=$KEY_PASSWORD
          EOF
      
      - name: Setup Play Store credentials
        env:
          PLAY_STORE_JSON_KEY: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
        run: |
          echo "$PLAY_STORE_JSON_KEY" > android/fastlane/service-account.json
      
      - name: Deploy to Internal Testing
        if: github.event_name == 'push' && !contains(github.ref, 'beta') && !contains(github.ref, 'release')
        run: cd android && bundle exec fastlane internal
      
      - name: Deploy to Beta Track
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.track == 'beta') ||
          (github.event_name == 'push' && contains(github.ref, 'beta'))
        run: cd android && bundle exec fastlane beta
      
      - name: Deploy to Production
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.track == 'production') ||
          (github.event_name == 'push' && contains(github.ref, 'release'))
        run: cd android && bundle exec fastlane release
      
      - name: Upload build artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: android-build-logs
          path: |
            android/fastlane/report.xml
            android/app/build/outputs/
      
      - name: Cleanup sensitive files
        if: always()
        run: |
          rm -f android/app/rnawtest-release.keystore
          rm -f android/fastlane/service-account.json
          rm -f android/gradle.properties

  notify:
    name: Notify Deployment Status
    needs: [deploy-ios, deploy-android]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Check deployment status
        run: |
          echo "iOS deployment: ${{ needs.deploy-ios.result }}"
          echo "Android deployment: ${{ needs.deploy-android.result }}"
