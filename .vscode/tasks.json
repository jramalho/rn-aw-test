{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Create project structure and config files",
			"type": "shell",
			"command": "mkdir -p src/{components,screens,navigation,hooks,utils,types,store,test} assets && echo '# Environment Configuration Example\n# Copy this file to .env and fill in your actual values\n\n# App Configuration  \nAPP_ENV=development\nAPP_NAME=RN AW Test\nAPP_VERSION=0.0.1\n\n# API Configuration\nAPI_BASE_URL=https://api.example.com\nAPI_KEY=your_api_key_here\nAPI_TIMEOUT=10000\n\n# Feature Flags\nENABLE_FLIPPER=true\nENABLE_DEV_MENU=true\nENABLE_PERFORMANCE_MONITORING=true\n\n# Analytics\nANALYTICS_ENABLED=false\nANALYTICS_KEY=your_analytics_key_here\n\n# Debugging\nLOG_LEVEL=debug\nREACTOTRON_HOST=localhost' > .env.example",
			"group": "setup"
		},
		{
			"label": "Setup Husky pre-commit hooks",
			"type": "shell",
			"command": "mkdir -p .husky && echo '#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpx lint-staged' > .husky/pre-commit && chmod +x .husky/pre-commit",
			"group": "setup"
		},
		{
			"label": "Create CI/CD workflow",
			"type": "shell",
			"command": "cat > .github/workflows/ci.yml << 'EOF'\nname: CI\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  lint-and-test:\n    name: Lint and Test\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n          \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Run TypeScript check\n        run: npm run type-check\n        \n      - name: Run linter\n        run: npm run lint\n        \n      - name: Run tests\n        run: npm run test:coverage\n        \n      - name: Upload coverage reports\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage/lcov.info\n          flags: unittests\n          name: codecov-umbrella\n\n  build-android:\n    name: Build Android\n    runs-on: ubuntu-latest\n    needs: lint-and-test\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        \n      - name: Setup Node.js  \n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n          \n      - name: Setup Java\n        uses: actions/setup-java@v4\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          \n      - name: Setup Android SDK\n        uses: android-actions/setup-android@v3\n        \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Build Android APK\n        run: |\n          cd android\n          chmod +x ./gradlew\n          ./gradlew assembleRelease --no-daemon\n          \n      - name: Upload APK\n        uses: actions/upload-artifact@v4\n        with:\n          name: app-release.apk\n          path: android/app/build/outputs/apk/release/app-release.apk\nEOF",
			"group": "setup"
		},
		{
			"label": "Create theme store",
			"type": "shell",
			"command": "cat > src/store/themeStore.ts << 'EOF'\nimport { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\ninterface ThemeState {\n  isDarkMode: boolean;\n  systemTheme: boolean;\n  toggleTheme: () => void;\n  setSystemTheme: (isDark: boolean) => void;\n  setTheme: (isDark: boolean) => void;\n}\n\nexport const useThemeStore = create<ThemeState>()(\n  persist(\n    (set, get) => ({\n      isDarkMode: false,\n      systemTheme: true,\n      toggleTheme: () => set((state) => ({ \n        isDarkMode: !state.isDarkMode,\n        systemTheme: false \n      })),\n      setSystemTheme: (isDark: boolean) => {\n        const { systemTheme } = get();\n        if (systemTheme) {\n          set({ isDarkMode: isDark });\n        }\n      },\n      setTheme: (isDark: boolean) => set({ \n        isDarkMode: isDark, \n        systemTheme: false \n      }),\n    }),\n    {\n      name: 'theme-storage',\n      storage: createJSONStorage(() => AsyncStorage),\n    }\n  )\n);\nEOF",
			"group": "setup"
		},
		{
			"label": "Create test setup",
			"type": "shell",
			"command": "cat > src/test/setup.ts << 'EOF'\nimport '@testing-library/react-native/extend-expect';\nimport 'react-native-gesture-handler/jestSetup';\n\n// Mock react-native-safe-area-context\njest.mock('react-native-safe-area-context', () => {\n  const inset = { top: 0, right: 0, bottom: 0, left: 0 };\n  return {\n    SafeAreaProvider: ({ children }: { children: React.ReactNode }) => children,\n    SafeAreaConsumer: ({ children }: { children: (insets: typeof inset) => React.ReactNode }) => children(inset),\n    useSafeAreaInsets: () => inset,\n    useSafeAreaFrame: () => ({ x: 0, y: 0, width: 390, height: 844 }),\n  };\n});\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () =>\n  require('@react-native-async-storage/async-storage/jest/async-storage-mock')\n);\n\n// Mock react-native-reanimated\njest.mock('react-native-reanimated', () => {\n  const Reanimated = require('react-native-reanimated/mock');\n  \n  // The mock for `call` immediately calls the callback which is incorrect\n  // So we override it with a no-op\n  Reanimated.default.call = () => {};\n  \n  return Reanimated;\n});\n\n// Silence the warning: Animated: `useNativeDriver`\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');\n\n// Mock console methods for cleaner test output\nglobal.console = {\n  ...console,\n  // Uncomment to ignore a specific log level\n  // log: jest.fn(),\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn(),\n};\nEOF",
			"group": "setup"
		},
		{
			"label": "Create TypeScript types",
			"type": "shell",
			"command": "cat > src/types/index.ts << 'EOF'\n// Navigation Types\nexport type RootStackParamList = {\n  Home: undefined;\n  Profile: undefined;\n  Settings: undefined;\n};\n\n// Theme Types  \nexport interface Theme {\n  colors: {\n    primary: string;\n    secondary: string;\n    background: string;\n    surface: string;\n    text: string;\n    error: string;\n  };\n  spacing: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n  };\n  typography: {\n    h1: TextStyle;\n    h2: TextStyle;\n    body: TextStyle;\n    caption: TextStyle;\n  };\n}\n\n// API Types\nexport interface ApiResponse<T> {\n  data: T;\n  message: string;\n  success: boolean;\n}\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  avatar?: string;\n  createdAt: string;\n}\n\n// Component Props\nexport interface ButtonProps {\n  title: string;\n  onPress: () => void;\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'small' | 'medium' | 'large';\n  disabled?: boolean;\n  loading?: boolean;\n}\n\nexport interface CardProps {\n  children: React.ReactNode;\n  title?: string;\n  subtitle?: string;\n  onPress?: () => void;\n}\n\n// Import TextStyle from React Native\nimport { TextStyle } from 'react-native';\nEOF",
			"group": "setup"
		},
		{
			"label": "Create utility functions",
			"type": "shell",
			"command": "cat > src/utils/index.ts << 'EOF'\n/**\n * Utility functions for the React Native app\n */\n\n// Platform utilities\nexport const isIOS = Platform.OS === 'ios';\nexport const isAndroid = Platform.OS === 'android';\n\n// Screen dimensions\nexport const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');\n\n// Responsive design helpers\nexport const scale = (size: number): number => (SCREEN_WIDTH / 375) * size;\nexport const verticalScale = (size: number): number => (SCREEN_HEIGHT / 667) * size;\nexport const moderateScale = (size: number, factor = 0.5): number => \n  size + (scale(size) - size) * factor;\n\n// Color utilities\nexport const hexToRgba = (hex: string, alpha: number): string => {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\n// String utilities\nexport const capitalize = (str: string): string => \n  str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n\nexport const truncate = (str: string, length: number): string => \n  str.length > length ? `${str.substring(0, length)}...` : str;\n\n// Number utilities\nexport const formatCurrency = (amount: number, currency = 'USD'): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n};\n\nexport const clamp = (value: number, min: number, max: number): number => \n  Math.min(Math.max(value, min), max);\n\n// Date utilities\nexport const formatDate = (date: Date | string, format = 'short'): string => {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  \n  if (format === 'short') {\n    return d.toLocaleDateString();\n  }\n  \n  if (format === 'long') {\n    return d.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  }\n  \n  return d.toISOString();\n};\n\nexport const getTimeAgo = (date: Date | string): string => {\n  const now = new Date();\n  const past = typeof date === 'string' ? new Date(date) : date;\n  const diffInSeconds = Math.floor((now.getTime() - past.getTime()) / 1000);\n  \n  if (diffInSeconds < 60) return 'just now';\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;\n  return `${Math.floor(diffInSeconds / 86400)}d ago`;\n};\n\n// Validation utilities\nexport const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nexport const isValidPhone = (phone: string): boolean => {\n  const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n  return phoneRegex.test(phone.replace(/\\s/g, ''));\n};\n\n// Array utilities\nexport const uniqueBy = <T>(array: T[], key: keyof T): T[] => {\n  const seen = new Set();\n  return array.filter(item => {\n    const value = item[key];\n    if (seen.has(value)) return false;\n    seen.add(value);\n    return true;\n  });\n};\n\nexport const groupBy = <T>(array: T[], key: keyof T): Record<string, T[]> => {\n  return array.reduce((groups, item) => {\n    const groupKey = String(item[key]);\n    if (!groups[groupKey]) {\n      groups[groupKey] = [];\n    }\n    groups[groupKey].push(item);\n    return groups;\n  }, {} as Record<string, T[]>);\n};\n\n// Performance utilities\nexport const debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void => {\n  let timeoutId: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func(...args), delay);\n  };\n};\n\nexport const throttle = <T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void => {\n  let isThrottled = false;\n  return (...args: Parameters<T>) => {\n    if (!isThrottled) {\n      func(...args);\n      isThrottled = true;\n      setTimeout(() => { isThrottled = false; }, delay);\n    }\n  };\n};\n\n// Import necessary React Native modules\nimport { Platform, Dimensions } from 'react-native';\nEOF",
			"group": "setup"
		},
		{
			"label": "Create custom hooks",
			"type": "shell",
			"command": "cat > src/hooks/index.ts << 'EOF'\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { Keyboard, AppState } from 'react-native';\nimport type { AppStateStatus } from 'react-native';\n\n/**\n * Custom hook to track keyboard visibility\n */\nexport const useKeyboard = () => {\n  const [isKeyboardVisible, setKeyboardVisible] = useState(false);\n  const [keyboardHeight, setKeyboardHeight] = useState(0);\n\n  useEffect(() => {\n    const keyboardDidShowListener = Keyboard.addListener(\n      'keyboardDidShow',\n      (event) => {\n        setKeyboardVisible(true);\n        setKeyboardHeight(event.endCoordinates.height);\n      }\n    );\n    \n    const keyboardDidHideListener = Keyboard.addListener(\n      'keyboardDidHide',\n      () => {\n        setKeyboardVisible(false);\n        setKeyboardHeight(0);\n      }\n    );\n\n    return () => {\n      keyboardDidHideListener?.remove();\n      keyboardDidShowListener?.remove();\n    };\n  }, []);\n\n  return { isKeyboardVisible, keyboardHeight };\n};\n\n/**\n * Custom hook to track app state changes\n */\nexport const useAppState = () => {\n  const [appState, setAppState] = useState<AppStateStatus>(AppState.currentState);\n\n  useEffect(() => {\n    const handleAppStateChange = (nextAppState: AppStateStatus) => {\n      setAppState(nextAppState);\n    };\n\n    const subscription = AppState.addEventListener('change', handleAppStateChange);\n\n    return () => subscription?.remove();\n  }, []);\n\n  return appState;\n};\n\n/**\n * Custom hook for debounced values\n */\nexport const useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\n/**\n * Custom hook for previous value tracking\n */\nexport const usePrevious = <T>(value: T): T | undefined => {\n  const ref = useRef<T>();\n  \n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  \n  return ref.current;\n};\n\n/**\n * Custom hook for async operations with loading state\n */\nexport const useAsyncOperation = <T, E = Error>() => {\n  const [data, setData] = useState<T | null>(null);\n  const [error, setError] = useState<E | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const execute = useCallback(async (asyncFunction: () => Promise<T>) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await asyncFunction();\n      setData(result);\n      return result;\n    } catch (err) {\n      setError(err as E);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const reset = useCallback(() => {\n    setData(null);\n    setError(null);\n    setLoading(false);\n  }, []);\n\n  return { data, error, loading, execute, reset };\n};\n\n/**\n * Custom hook for countdown timer\n */\nexport const useCountdown = (initialTime: number) => {\n  const [time, setTime] = useState(initialTime);\n  const [isActive, setIsActive] = useState(false);\n\n  const start = useCallback(() => setIsActive(true), []);\n  const pause = useCallback(() => setIsActive(false), []);\n  const reset = useCallback(() => {\n    setTime(initialTime);\n    setIsActive(false);\n  }, [initialTime]);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout | null = null;\n    \n    if (isActive && time > 0) {\n      interval = setInterval(() => {\n        setTime(time => time - 1);\n      }, 1000);\n    } else if (time === 0) {\n      setIsActive(false);\n    }\n    \n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isActive, time]);\n\n  return { time, isActive, start, pause, reset };\n};\n\n/**\n * Custom hook for local storage with React Native AsyncStorage\n */\nexport const useAsyncStorage = <T>(key: string, initialValue: T) => {\n  const [storedValue, setStoredValue] = useState<T>(initialValue);\n  const [loading, setLoading] = useState(true);\n\n  const setValue = useCallback(async (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      \n      const { default: AsyncStorage } = await import('@react-native-async-storage/async-storage');\n      await AsyncStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting ${key} in AsyncStorage:`, error);\n    }\n  }, [key, storedValue]);\n\n  const removeValue = useCallback(async () => {\n    try {\n      const { default: AsyncStorage } = await import('@react-native-async-storage/async-storage');\n      await AsyncStorage.removeItem(key);\n      setStoredValue(initialValue);\n    } catch (error) {\n      console.error(`Error removing ${key} from AsyncStorage:`, error);\n    }\n  }, [key, initialValue]);\n\n  useEffect(() => {\n    const loadStoredValue = async () => {\n      try {\n        const { default: AsyncStorage } = await import('@react-native-async-storage/async-storage');\n        const item = await AsyncStorage.getItem(key);\n        \n        if (item !== null) {\n          setStoredValue(JSON.parse(item));\n        }\n      } catch (error) {\n        console.error(`Error loading ${key} from AsyncStorage:`, error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadStoredValue();\n  }, [key]);\n\n  return { value: storedValue, setValue, removeValue, loading };\n};\nEOF",
			"group": "setup"
		},
		{
			"label": "Create Button component",
			"type": "shell",
			"command": "cat > src/components/Button.tsx << 'EOF'\nimport React from 'react';\nimport {\n  Pressable,\n  Text,\n  StyleSheet,\n  ActivityIndicator,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport type { ButtonProps } from '../types';\n\nconst Button: React.FC<ButtonProps> = ({\n  title,\n  onPress,\n  variant = 'primary',\n  size = 'medium',\n  disabled = false,\n  loading = false,\n}) => {\n  const buttonStyle: ViewStyle[] = [\n    styles.base,\n    styles[size],\n    styles[variant],\n    (disabled || loading) && styles.disabled,\n  ];\n\n  const textStyle: TextStyle[] = [\n    styles.text,\n    styles[`${size}Text` as keyof typeof styles] as TextStyle,\n    styles[`${variant}Text` as keyof typeof styles] as TextStyle,\n    (disabled || loading) && styles.disabledText,\n  ];\n\n  return (\n    <Pressable\n      style={({ pressed }) => [\n        ...buttonStyle,\n        pressed && !disabled && !loading && styles.pressed,\n      ]}\n      onPress={onPress}\n      disabled={disabled || loading}\n      accessibilityRole=\"button\"\n      accessibilityLabel={title}\n      accessibilityState={{ disabled: disabled || loading }}\n    >\n      {loading ? (\n        <ActivityIndicator \n          size=\"small\" \n          color={variant === 'primary' ? '#ffffff' : '#007AFF'} \n        />\n      ) : (\n        <Text style={textStyle}>{title}</Text>\n      )}\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  base: {\n    borderRadius: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  // Sizes\n  small: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    minHeight: 36,\n  },\n  medium: {\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    minHeight: 44,\n  },\n  large: {\n    paddingHorizontal: 32,\n    paddingVertical: 16,\n    minHeight: 52,\n  },\n  // Variants\n  primary: {\n    backgroundColor: '#007AFF',\n  },\n  secondary: {\n    backgroundColor: '#34C759',\n  },\n  outline: {\n    backgroundColor: 'transparent',\n    borderWidth: 2,\n    borderColor: '#007AFF',\n  },\n  // Text styles\n  text: {\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  smallText: {\n    fontSize: 14,\n  },\n  mediumText: {\n    fontSize: 16,\n  },\n  largeText: {\n    fontSize: 18,\n  },\n  primaryText: {\n    color: '#ffffff',\n  },\n  secondaryText: {\n    color: '#ffffff',\n  },\n  outlineText: {\n    color: '#007AFF',\n  },\n  // States\n  disabled: {\n    opacity: 0.5,\n    shadowOpacity: 0,\n    elevation: 0,\n  },\n  disabledText: {\n    opacity: 0.7,\n  },\n  pressed: {\n    opacity: 0.8,\n    transform: [{ scale: 0.98 }],\n  },\n});\n\nexport default Button;\nEOF",
			"group": "setup"
		},
		{
			"label": "Create components index",
			"type": "shell",
			"command": "cat > src/components/index.ts << 'EOF'\n// Export all components from this barrel file\nexport { default as Button } from './Button';\n\n// Add more component exports as they are created\n// export { default as Card } from './Card';\n// export { default as Input } from './Input';\n// export { default as Modal } from './Modal';\nEOF",
			"group": "setup"
		},
		{
			"label": "Create App test",
			"type": "shell",
			"command": "cat > __tests__/App.test.tsx << 'EOF'\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport App from '../App';\n\n// Mock react-native-safe-area-context\njest.mock('react-native-safe-area-context', () => ({\n  SafeAreaProvider: ({ children }: { children: React.ReactNode }) => children,\n}));\n\ndescribe('App Component', () => {\n  it('renders correctly', () => {\n    const { getByText } = render(<App />);\n    \n    expect(getByText('🚀 RN AW Test')).toBeTruthy();\n    expect(getByText('React Native 0.82 New Architecture')).toBeTruthy();\n  });\n\n  it('displays feature cards', () => {\n    const { getByText } = render(<App />);\n    \n    expect(getByText('⚡ New Architecture')).toBeTruthy();\n    expect(getByText('⚛️ React 19.1.1')).toBeTruthy();\n    expect(getByText('📘 TypeScript 5.8.3')).toBeTruthy();\n    expect(getByText('🎨 Material Design 3')).toBeTruthy();\n  });\n\n  it('has interactive counter functionality', () => {\n    const { getByText } = render(<App />);\n    \n    const counterText = getByText('Counter: 0');\n    expect(counterText).toBeTruthy();\n    \n    const incrementButton = getByText('+');\n    const decrementButton = getByText('−');\n    \n    // Test increment\n    fireEvent.press(incrementButton);\n    expect(getByText('Counter: 1')).toBeTruthy();\n    \n    // Test increment again\n    fireEvent.press(incrementButton);\n    expect(getByText('Counter: 2')).toBeTruthy();\n    \n    // Test decrement\n    fireEvent.press(decrementButton);\n    expect(getByText('Counter: 1')).toBeTruthy();\n    \n    // Test decrement to zero\n    fireEvent.press(decrementButton);\n    expect(getByText('Counter: 0')).toBeTruthy();\n    \n    // Test that counter doesn\\'t go below zero\n    fireEvent.press(decrementButton);\n    expect(getByText('Counter: 0')).toBeTruthy();\n  });\n\n  it('displays architecture benefits', () => {\n    const { getByText } = render(<App />);\n    \n    expect(getByText('Architecture Benefits')).toBeTruthy();\n    expect(getByText('30-50% faster startup with Hermes V1')).toBeTruthy();\n    expect(getByText('15-20% smaller bundle size')).toBeTruthy();\n    expect(getByText('Synchronous native method calls')).toBeTruthy();\n    expect(getByText('Concurrent rendering support')).toBeTruthy();\n  });\n\n  it('has proper accessibility labels', () => {\n    const { getByText } = render(<App />);\n    \n    const incrementButton = getByText('+');\n    const decrementButton = getByText('−');\n    \n    expect(incrementButton).toBeTruthy();\n    expect(decrementButton).toBeTruthy();\n  });\n});\nEOF",
			"group": "setup"
		},
		{
			"label": "Create Button test",
			"type": "shell",
			"command": "cat > src/components/__tests__/Button.test.tsx << 'EOF'\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport Button from '../Button';\n\ndescribe('Button Component', () => {\n  const mockOnPress = jest.fn();\n\n  beforeEach(() => {\n    mockOnPress.mockClear();\n  });\n\n  it('renders correctly with title', () => {\n    const { getByText } = render(\n      <Button title=\"Test Button\" onPress={mockOnPress} />\n    );\n    \n    expect(getByText('Test Button')).toBeTruthy();\n  });\n\n  it('calls onPress when pressed', () => {\n    const { getByText } = render(\n      <Button title=\"Test Button\" onPress={mockOnPress} />\n    );\n    \n    fireEvent.press(getByText('Test Button'));\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\n  });\n\n  it('does not call onPress when disabled', () => {\n    const { getByText } = render(\n      <Button title=\"Test Button\" onPress={mockOnPress} disabled={true} />\n    );\n    \n    fireEvent.press(getByText('Test Button'));\n    expect(mockOnPress).not.toHaveBeenCalled();\n  });\n\n  it('shows loading indicator when loading', () => {\n    const { getByTestId, queryByText } = render(\n      <Button title=\"Test Button\" onPress={mockOnPress} loading={true} />\n    );\n    \n    // Title should not be visible when loading\n    expect(queryByText('Test Button')).toBeNull();\n    \n    // Should show activity indicator\n    expect(getByTestId(/activity-indicator/i)).toBeTruthy();\n  });\n\n  it('applies correct variant styles', () => {\n    const { rerender, getByText } = render(\n      <Button title=\"Primary\" onPress={mockOnPress} variant=\"primary\" />\n    );\n    \n    let button = getByText('Primary').parent;\n    expect(button).toBeTruthy();\n    \n    rerender(\n      <Button title=\"Secondary\" onPress={mockOnPress} variant=\"secondary\" />\n    );\n    \n    button = getByText('Secondary').parent;\n    expect(button).toBeTruthy();\n    \n    rerender(\n      <Button title=\"Outline\" onPress={mockOnPress} variant=\"outline\" />\n    );\n    \n    button = getByText('Outline').parent;\n    expect(button).toBeTruthy();\n  });\n\n  it('applies correct size styles', () => {\n    const { rerender, getByText } = render(\n      <Button title=\"Small\" onPress={mockOnPress} size=\"small\" />\n    );\n    \n    let button = getByText('Small').parent;\n    expect(button).toBeTruthy();\n    \n    rerender(\n      <Button title=\"Medium\" onPress={mockOnPress} size=\"medium\" />\n    );\n    \n    button = getByText('Medium').parent;\n    expect(button).toBeTruthy();\n    \n    rerender(\n      <Button title=\"Large\" onPress={mockOnPress} size=\"large\" />\n    );\n    \n    button = getByText('Large').parent;\n    expect(button).toBeTruthy();\n  });\n\n  it('has correct accessibility properties', () => {\n    const { getByRole } = render(\n      <Button title=\"Accessible Button\" onPress={mockOnPress} />\n    );\n    \n    const button = getByRole('button');\n    expect(button).toBeTruthy();\n    expect(button.props.accessibilityLabel).toBe('Accessible Button');\n  });\n\n  it('has disabled accessibility state when disabled', () => {\n    const { getByRole } = render(\n      <Button title=\"Disabled Button\" onPress={mockOnPress} disabled={true} />\n    );\n    \n    const button = getByRole('button');\n    expect(button.props.accessibilityState.disabled).toBe(true);\n  });\n});\nEOF",
			"group": "setup"
		},
		{
			"label": "Create Contributing guide",
			"type": "shell",
			"command": "cat > CONTRIBUTING.md << 'EOF'\n# Contributing to RN AW Test\n\nWe welcome contributions to this React Native 0.82 New Architecture showcase project! This document provides guidelines for contributing effectively.\n\n## 🚀 Getting Started\n\n### Prerequisites\n\n- Node.js 20+\n- React Native development environment set up\n- Git\n- Understanding of React Native New Architecture concepts\n\n### Fork and Clone\n\n1. Fork the repository\n2. Clone your fork: `git clone https://github.com/YOUR_USERNAME/rn-aw-test.git`\n3. Add upstream remote: `git remote add upstream https://github.com/jramalhoinvillia/rn-aw-test.git`\n\n### Set Up Development Environment\n\n```bash\n# Install dependencies\nnpm install\n\n# Set up environment variables\ncp .env.example .env\n\n# Install iOS dependencies (macOS only)\ncd ios && bundle exec pod install && cd ..\n\n# Set up Git hooks\nnpm run prepare\n```\n\n## 📝 Development Workflow\n\n### Branch Naming Convention\n\n- `feature/feature-name` - New features\n- `fix/bug-description` - Bug fixes  \n- `docs/documentation-update` - Documentation changes\n- `refactor/component-name` - Code refactoring\n- `test/test-description` - Test additions/improvements\n\n### Code Style\n\n- **TypeScript**: Use strict TypeScript with proper typing\n- **ESLint**: Follow the configured ESLint rules\n- **Prettier**: Code formatting is enforced\n- **File naming**: Use PascalCase for components, camelCase for utilities\n- **Import order**: External libraries → Internal imports → Types\n\n### Commit Messages\n\nUse conventional commits format:\n\n```\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\n**Types:**\n- `feat:` New feature\n- `fix:` Bug fix\n- `docs:` Documentation changes\n- `style:` Code style changes (formatting, etc.)\n- `refactor:` Code refactoring\n- `test:` Adding or updating tests\n- `chore:` Maintenance tasks\n\n**Examples:**\n```\nfeat(auth): add biometric authentication\nfix(navigation): resolve deep linking issue\ndocs(readme): update installation instructions\ntest(button): add accessibility tests\n```\n\n## 🧪 Testing Guidelines\n\n### Writing Tests\n\n- **Unit Tests**: Test individual components and functions\n- **Integration Tests**: Test component interactions\n- **Accessibility Tests**: Ensure proper accessibility support\n- **Coverage**: Aim for >80% code coverage\n\n### Test Structure\n\n```typescript\ndescribe('ComponentName', () => {\n  beforeEach(() => {\n    // Setup\n  });\n\n  it('should render correctly', () => {\n    // Test implementation\n  });\n\n  it('should handle user interactions', () => {\n    // Test user interactions\n  });\n\n  it('should be accessible', () => {\n    // Test accessibility\n  });\n});\n```\n\n### Running Tests\n\n```bash\n# Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Generate coverage report\nnpm run test:coverage\n\n# Run E2E tests\nnpm run test:e2e:build:android\nnpm run test:e2e:test:android\n```\n\n## 🏗️ New Architecture Guidelines\n\n### TurboModules\n\n- Use TurboModules for new native functionality\n- Follow the official TurboModule spec\n- Include proper TypeScript definitions\n- Add comprehensive tests\n\n### Fabric Components\n\n- Create new UI components using Fabric\n- Ensure proper native view management\n- Test on both iOS and Android\n- Document component props and behavior\n\n### Performance Considerations\n\n- Leverage JSI for performance-critical code\n- Use React.memo() and useMemo() appropriately  \n- Implement proper list virtualization\n- Monitor bundle size impact\n\n## 📱 Platform-Specific Guidelines\n\n### iOS\n\n- Follow iOS Human Interface Guidelines\n- Test on multiple iOS versions and devices\n- Ensure proper safe area handling\n- Use iOS-specific optimizations where appropriate\n\n### Android\n\n- Follow Material Design guidelines\n- Test on multiple Android versions and screen sizes\n- Handle Android-specific permissions properly\n- Optimize for different device capabilities\n\n## 🚦 Pull Request Process\n\n### Before Submitting\n\n1. **Ensure all tests pass**: `npm test`\n2. **Check TypeScript**: `npm run type-check`\n3. **Lint your code**: `npm run lint:fix`\n4. **Update documentation** if needed\n5. **Add/update tests** for new functionality\n\n### PR Requirements\n\n- **Clear title and description**\n- **Link to related issues**\n- **Screenshots/videos** for UI changes\n- **Performance impact assessment**\n- **Breaking changes documented**\n\n### PR Template\n\n```markdown\n## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature  \n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Manual testing completed\n- [ ] Accessibility tested\n\n## Screenshots/Videos\n(If applicable)\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Tests pass\n- [ ] Documentation updated\n```\n\n## 🛠️ Development Tools\n\n### Recommended VS Code Extensions\n\n- React Native Tools\n- TypeScript and JavaScript Language Features\n- ESLint\n- Prettier\n- Auto Rename Tag\n- GitLens\n\n### Debugging\n\n- **Flipper**: For React Native debugging\n- **React DevTools**: For component inspection  \n- **Reactotron**: For state management debugging\n- **Native debugging**: Xcode/Android Studio for native issues\n\n## 📊 Performance Guidelines\n\n### Bundle Size\n\n- Monitor bundle impact of new dependencies\n- Use tree-shaking-friendly imports\n- Implement code splitting where appropriate\n\n### Runtime Performance\n\n- Profile with React DevTools Profiler\n- Use Performance Monitor in development\n- Test on lower-end devices\n- Monitor memory usage\n\n### New Architecture Benefits\n\n- Leverage synchronous native calls\n- Use Concurrent Features appropriately\n- Implement proper error boundaries\n- Optimize for Hermes engine\n\n## 🐛 Bug Reports\n\n### Creating Issues\n\nWhen reporting bugs:\n\n1. **Use the bug report template**\n2. **Provide clear reproduction steps**\n3. **Include environment details**\n4. **Add screenshots/logs** if applicable\n5. **Check for existing issues** first\n\n### Bug Report Template\n\n```markdown\n## Bug Description\nClear description of the bug\n\n## Steps to Reproduce\n1. Step 1\n2. Step 2\n3. Step 3\n\n## Expected Behavior\nWhat should happen\n\n## Actual Behavior  \nWhat actually happens\n\n## Environment\n- OS: [e.g. iOS 17.0, Android 14]\n- Device: [e.g. iPhone 15, Pixel 7]\n- React Native: 0.82.0\n- Node: 20.x\n\n## Additional Context\nAny other relevant information\n```\n\n## 💡 Feature Requests\n\n### Proposing Features\n\n1. **Check existing issues** and discussions\n2. **Use the feature request template**\n3. **Explain the use case** clearly\n4. **Consider New Architecture benefits**\n5. **Discuss implementation approach**\n\n## 🤝 Code of Conduct\n\n- Be respectful and inclusive\n- Focus on constructive feedback\n- Help newcomers learn\n- Follow community guidelines\n- Report inappropriate behavior\n\n## 🙏 Recognition\n\nContributors will be:\n\n- **Listed in README.md**\n- **Credited in release notes**\n- **Given appropriate GitHub roles**\n- **Recognized in project discussions**\n\n## 📚 Learning Resources\n\n### New Architecture\n\n- [Official New Architecture Docs](https://reactnative.dev/docs/the-new-architecture/landing-page)\n- [Fabric Renderer Guide](https://reactnative.dev/docs/fabric-renderer)\n- [TurboModules Documentation](https://reactnative.dev/docs/turbo-modules)\n\n### React Native\n\n- [React Native Documentation](https://reactnative.dev/docs/getting-started)\n- [React Native Community](https://github.com/react-native-community)\n- [Awesome React Native](https://github.com/jondot/awesome-react-native)\n\n### TypeScript\n\n- [TypeScript Handbook](https://www.typescriptlang.org/docs/)\n- [React TypeScript Cheatsheet](https://github.com/typescript-cheatsheets/react)\n\n---\n\n**Thank you for contributing to RN AW Test! 🚀**\n\nFor questions, reach out through:\n- GitHub Issues\n- GitHub Discussions  \n- Project maintainers\nEOF",
			"group": "setup"
		},
		{
			"label": "TypeScript Check",
			"type": "shell",
			"command": "npx tsc --noEmit",
			"group": "test"
		},
		{
			"label": "ESLint Check",
			"type": "shell",
			"command": "npx eslint . --ext .js,.jsx,.ts,.tsx",
			"group": "test"
		},
		{
			"label": "Run Tests",
			"type": "shell",
			"command": "npm test",
			"group": "test"
		},
		{
			"label": "Create navigation setup",
			"type": "shell",
			"command": "cat > src/navigation/AppNavigator.tsx << 'EOF'\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Platform } from 'react-native';\n\n// Import screens (to be created)\nimport HomeScreen from '../screens/HomeScreen';\nimport ProfileScreen from '../screens/ProfileScreen';\nimport SettingsScreen from '../screens/SettingsScreen';\n\n// Import types\nimport type { RootStackParamList } from '../types';\n\nconst Stack = createStackNavigator<RootStackParamList>();\nconst Tab = createBottomTabNavigator();\n\nconst TabNavigator: React.FC = () => {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        headerShown: false,\n        tabBarStyle: {\n          backgroundColor: Platform.OS === 'ios' ? '#f8f9fa' : '#ffffff',\n          borderTopWidth: 1,\n          borderTopColor: '#e1e5e9',\n          paddingBottom: Platform.OS === 'ios' ? 20 : 10,\n          height: Platform.OS === 'ios' ? 80 : 60,\n        },\n        tabBarActiveTintColor: '#007AFF',\n        tabBarInactiveTintColor: '#8e8e93',\n        tabBarLabelStyle: {\n          fontSize: 12,\n          fontWeight: '500',\n        },\n      }}\n    >\n      <Tab.Screen \n        name=\"Home\" \n        component={HomeScreen}\n        options={{\n          tabBarIcon: ({ color }) => <TabIcon name=\"home\" color={color} />,\n        }}\n      />\n      <Tab.Screen \n        name=\"Profile\" \n        component={ProfileScreen}\n        options={{\n          tabBarIcon: ({ color }) => <TabIcon name=\"person\" color={color} />,\n        }}\n      />\n      <Tab.Screen \n        name=\"Settings\" \n        component={SettingsScreen}\n        options={{\n          tabBarIcon: ({ color }) => <TabIcon name=\"settings\" color={color} />,\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nconst TabIcon: React.FC<{ name: string; color: string }> = ({ name, color }) => {\n  // Simple text-based icons for now\n  const iconMap: { [key: string]: string } = {\n    home: '🏠',\n    person: '👤', \n    settings: '⚙️',\n  };\n\n  return (\n    <Text style={{ fontSize: 20, color }}>\n      {iconMap[name] || '?'}\n    </Text>\n  );\n};\n\nexport const AppNavigator: React.FC = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#007AFF',\n        },\n        headerTintColor: '#ffffff',\n        headerTitleStyle: {\n          fontWeight: '600',\n        },\n      }}\n    >\n      <Stack.Screen \n        name=\"Main\" \n        component={TabNavigator}\n        options={{ headerShown: false }}\n      />\n    </Stack.Navigator>\n  );\n};\n\n// Import Text from React Native\nimport { Text } from 'react-native';\nEOF",
			"group": "setup"
		},
		{
			"label": "Create HomeScreen",
			"type": "shell",
			"command": "cat > src/screens/HomeScreen.tsx << 'EOF'\nimport React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  useColorScheme,\n} from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Button } from '../components';\nimport { useCountdown } from '../hooks';\n\nconst HomeScreen: React.FC = () => {\n  const insets = useSafeAreaInsets();\n  const isDarkMode = useColorScheme() === 'dark';\n  const { time, isActive, start, pause, reset } = useCountdown(60);\n  const [counter, setCounter] = React.useState(0);\n\n  const backgroundStyle = {\n    backgroundColor: isDarkMode ? '#1a1a1a' : '#ffffff',\n  };\n\n  const textStyle = {\n    color: isDarkMode ? '#ffffff' : '#000000',\n  };\n\n  return (\n    <View style={[styles.container, backgroundStyle, { paddingTop: insets.top }]}>\n      <ScrollView \n        contentInsetAdjustmentBehavior=\"automatic\"\n        style={backgroundStyle}\n        contentContainerStyle={styles.scrollContent}\n      >\n        {/* Header */}\n        <View style={styles.header}>\n          <Text style={[styles.title, textStyle]}>\n            Welcome to RN AW Test!\n          </Text>\n          <Text style={[styles.subtitle, textStyle]}>\n            Showcasing React Native 0.82 New Architecture\n          </Text>\n        </View>\n\n        {/* Feature Demo Section */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, textStyle]}>Interactive Features</Text>\n          \n          {/* Counter Demo */}\n          <View style={[styles.card, { backgroundColor: isDarkMode ? '#2a2a2a' : '#f8f9fa' }]}>\n            <Text style={[styles.cardTitle, textStyle]}>Counter Demo</Text>\n            <Text style={[styles.counterText, textStyle]}>Count: {counter}</Text>\n            \n            <View style={styles.buttonRow}>\n              <Button \n                title=\"-\" \n                onPress={() => setCounter(prev => Math.max(0, prev - 1))}\n                size=\"small\"\n                variant=\"outline\"\n              />\n              <Button \n                title=\"Reset\" \n                onPress={() => setCounter(0)}\n                size=\"small\"\n              />\n              <Button \n                title=\"+\" \n                onPress={() => setCounter(prev => prev + 1)}\n                size=\"small\"\n                variant=\"secondary\"\n              />\n            </View>\n          </View>\n\n          {/* Countdown Demo */}\n          <View style={[styles.card, { backgroundColor: isDarkMode ? '#2a2a2a' : '#f8f9fa' }]}>\n            <Text style={[styles.cardTitle, textStyle]}>Countdown Timer</Text>\n            <Text style={[styles.timerText, textStyle]}>\n              {Math.floor(time / 60)}:{(time % 60).toString().padStart(2, '0')}\n            </Text>\n            \n            <View style={styles.buttonRow}>\n              <Button \n                title={isActive ? \"Pause\" : \"Start\"}\n                onPress={isActive ? pause : start}\n                size=\"small\"\n                variant={isActive ? \"outline\" : \"primary\"}\n              />\n              <Button \n                title=\"Reset\" \n                onPress={reset}\n                size=\"small\"\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* New Architecture Info */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, textStyle]}>New Architecture Benefits</Text>\n          \n          <View style={[styles.infoCard, { backgroundColor: isDarkMode ? '#2a2a2a' : '#f0f8ff' }]}>\n            <View style={styles.infoItem}>\n              <Text style={styles.infoIcon}>⚡</Text>\n              <Text style={[styles.infoText, textStyle]}>Synchronous Native Calls</Text>\n            </View>\n            \n            <View style={styles.infoItem}>\n              <Text style={styles.infoIcon}>🚀</Text>\n              <Text style={[styles.infoText, textStyle]}>30-50% Faster Startup</Text>\n            </View>\n            \n            <View style={styles.infoItem}>\n              <Text style={styles.infoIcon}>📱</Text>\n              <Text style={[styles.infoText, textStyle]}>15-20% Smaller Bundle</Text>\n            </View>\n            \n            <View style={styles.infoItem}>\n              <Text style={styles.infoIcon}>🔄</Text>\n              <Text style={[styles.infoText, textStyle]}>Concurrent Rendering</Text>\n            </View>\n          </View>\n        </View>\n\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollContent: {\n    padding: 16,\n    paddingBottom: 32,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 32,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: '700',\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    textAlign: 'center',\n    opacity: 0.7,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginBottom: 16,\n  },\n  card: {\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  cardTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 12,\n    textAlign: 'center',\n  },\n  counterText: {\n    fontSize: 32,\n    fontWeight: '700',\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  timerText: {\n    fontSize: 36,\n    fontWeight: '700',\n    textAlign: 'center',\n    marginBottom: 16,\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n  },\n  buttonRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    gap: 12,\n  },\n  infoCard: {\n    padding: 16,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  infoItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  infoIcon: {\n    fontSize: 20,\n    marginRight: 12,\n    width: 28,\n  },\n  infoText: {\n    fontSize: 16,\n    flex: 1,\n  },\n});\n\nexport default HomeScreen;\n\n// Import Platform\nimport { Platform } from 'react-native';\nEOF",
			"group": "setup"
		},
		{
			"label": "Create ProfileScreen",
			"type": "shell",
			"command": "cat > src/screens/ProfileScreen.tsx << 'EOF'\nimport React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  useColorScheme,\n} from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Button } from '../components';\n\nconst ProfileScreen: React.FC = () => {\n  const insets = useSafeAreaInsets();\n  const isDarkMode = useColorScheme() === 'dark';\n\n  const backgroundStyle = {\n    backgroundColor: isDarkMode ? '#1a1a1a' : '#ffffff',\n  };\n\n  const textStyle = {\n    color: isDarkMode ? '#ffffff' : '#000000',\n  };\n\n  return (\n    <View style={[styles.container, backgroundStyle, { paddingTop: insets.top }]}>\n      <ScrollView \n        contentInsetAdjustmentBehavior=\"automatic\"\n        style={backgroundStyle}\n        contentContainerStyle={styles.scrollContent}\n      >\n        {/* Profile Header */}\n        <View style={styles.profileHeader}>\n          <View style={[styles.avatar, { backgroundColor: isDarkMode ? '#007AFF' : '#007AFF' }]}>\n            <Text style={styles.avatarText}>RN</Text>\n          </View>\n          <Text style={[styles.name, textStyle]}>React Native Developer</Text>\n          <Text style={[styles.email, textStyle]}>developer@rnawtest.com</Text>\n        </View>\n\n        {/* Stats Section */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, textStyle]}>Development Stats</Text>\n          \n          <View style={styles.statsContainer}>\n            <View style={[styles.statCard, { backgroundColor: isDarkMode ? '#2a2a2a' : '#f0f8ff' }]}>\n              <Text style={[styles.statNumber, textStyle]}>0.82</Text>\n              <Text style={[styles.statLabel, textStyle]}>RN Version</Text>\n            </View>\n            \n            <View style={[styles.statCard, { backgroundColor: isDarkMode ? '#2a2a2a' : '#f0fff0' }]}>\n              <Text style={[styles.statNumber, textStyle]}>19.1</Text>\n              <Text style={[styles.statLabel, textStyle]}>React Version</Text>\n            </View>\n            \n            <View style={[styles.statCard, { backgroundColor: isDarkMode ? '#2a2a2a' : '#fff8f0' }]}>\n              <Text style={[styles.statNumber, textStyle]}>5.8</Text>\n              <Text style={[styles.statLabel, textStyle]}>TypeScript</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Experience Section */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, textStyle]}>New Architecture Experience</Text>\n          \n          <View style={[styles.experienceCard, { backgroundColor: isDarkMode ? '#2a2a2a' : '#f8f9fa' }]}>\n            <View style={styles.experienceItem}>\n              <Text style={styles.experienceIcon}>✓</Text>\n              <Text style={[styles.experienceText, textStyle]}>Fabric Renderer Implementation</Text>\n            </View>\n            \n            <View style={styles.experienceItem}>\n              <Text style={styles.experienceIcon}>✓</Text>\n              <Text style={[styles.experienceText, textStyle]}>TurboModules Development</Text>\n            </View>\n            \n            <View style={styles.experienceItem}>\n              <Text style={styles.experienceIcon}>✓</Text>\n              <Text style={[styles.experienceText, textStyle]}>JSI Direct Integration</Text>\n            </View>\n            \n            <View style={styles.experienceItem}>\n              <Text style={styles.experienceIcon}>✓</Text>\n              <Text style={[styles.experienceText, textStyle]}>Concurrent React Features</Text>\n            </View>\n            \n            <View style={styles.experienceItem}>\n              <Text style={styles.experienceIcon}>✓</Text>\n              <Text style={[styles.experienceText, textStyle]}>Hermes V1 Optimization</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Actions Section */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, textStyle]}>Profile Actions</Text>\n          \n          <View style={styles.actionsContainer}>\n            <Button \n              title=\"Edit Profile\"\n              onPress={() => console.log('Edit Profile pressed')}\n              variant=\"primary\"\n            />\n            \n            <Button \n              title=\"View Projects\"\n              onPress={() => console.log('View Projects pressed')}\n              variant=\"outline\"\n            />\n            \n            <Button \n              title=\"Share Profile\"\n              onPress={() => console.log('Share Profile pressed')}\n              variant=\"secondary\"\n            />\n          </View>\n        </View>\n\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollContent: {\n    padding: 16,\n    paddingBottom: 32,\n  },\n  profileHeader: {\n    alignItems: 'center',\n    marginBottom: 32,\n  },\n  avatar: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  avatarText: {\n    color: '#ffffff',\n    fontSize: 24,\n    fontWeight: '700',\n  },\n  name: {\n    fontSize: 24,\n    fontWeight: '700',\n    marginBottom: 4,\n  },\n  email: {\n    fontSize: 16,\n    opacity: 0.7,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginBottom: 16,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: '700',\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    opacity: 0.7,\n    textAlign: 'center',\n  },\n  experienceCard: {\n    padding: 16,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  experienceItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  experienceIcon: {\n    fontSize: 16,\n    color: '#34C759',\n    marginRight: 12,\n    fontWeight: '600',\n  },\n  experienceText: {\n    fontSize: 16,\n    flex: 1,\n  },\n  actionsContainer: {\n    gap: 12,\n  },\n});\n\nexport default ProfileScreen;\nEOF",
			"group": "setup"
		},
		{
			"label": "Create SettingsScreen",
			"type": "shell",
			"command": "cat > src/screens/SettingsScreen.tsx << 'EOF'\nimport React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  Switch,\n  Pressable,\n  useColorScheme,\n} from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { useThemeStore } from '../store/themeStore';\nimport { Button } from '../components';\n\nconst SettingsScreen: React.FC = () => {\n  const insets = useSafeAreaInsets();\n  const systemColorScheme = useColorScheme();\n  const { isDarkMode, systemTheme, toggleTheme, setTheme } = useThemeStore();\n  \n  // Local state for other settings\n  const [notificationsEnabled, setNotificationsEnabled] = React.useState(true);\n  const [analyticsEnabled, setAnalyticsEnabled] = React.useState(false);\n  const [performanceMonitoring, setPerformanceMonitoring] = React.useState(true);\n\n  const backgroundStyle = {\n    backgroundColor: isDarkMode ? '#1a1a1a' : '#ffffff',\n  };\n\n  const textStyle = {\n    color: isDarkMode ? '#ffffff' : '#000000',\n  };\n\n  const handleThemeChange = () => {\n    toggleTheme();\n  };\n\n  const resetToSystemTheme = () => {\n    setTheme(systemColorScheme === 'dark');\n  };\n\n  return (\n    <View style={[styles.container, backgroundStyle, { paddingTop: insets.top }]}>\n      <ScrollView \n        contentInsetAdjustmentBehavior=\"automatic\"\n        style={backgroundStyle}\n        contentContainerStyle={styles.scrollContent}\n      >\n        {/* Header */}\n        <View style={styles.header}>\n          <Text style={[styles.title, textStyle]}>Settings</Text>\n          <Text style={[styles.subtitle, textStyle]}>Customize your app experience</Text>\n        </View>\n\n        {/* Appearance Section */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, textStyle]}>Appearance</Text>\n          \n          <View style={[styles.settingCard, { backgroundColor: isDarkMode ? '#2a2a2a' : '#f8f9fa' }]}>\n            <SettingItem\n              title=\"Dark Mode\"\n              description={`Currently: ${isDarkMode ? 'Dark' : 'Light'}`}\n              value={isDarkMode}\n              onValueChange={handleThemeChange}\n              isDarkMode={isDarkMode}\n            />\n            \n            <View style={styles.separator} />\n            \n            <Pressable style={styles.settingPressable} onPress={resetToSystemTheme}>\n              <View>\n                <Text style={[styles.settingTitle, textStyle]}>Use System Theme</Text>\n                <Text style={[styles.settingDescription, textStyle]}>\n                  {systemTheme ? 'Following system settings' : 'Manual override active'}\n                </Text>\n              </View>\n              <Text style={[styles.actionText, { color: '#007AFF' }]}>Reset</Text>\n            </Pressable>\n          </View>\n        </View>\n\n        {/* App Settings Section */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, textStyle]}>App Settings</Text>\n          \n          <View style={[styles.settingCard, { backgroundColor: isDarkMode ? '#2a2a2a' : '#f8f9fa' }]}>\n            <SettingItem\n              title=\"Push Notifications\"\n              description=\"Receive app updates and alerts\"\n              value={notificationsEnabled}\n              onValueChange={setNotificationsEnabled}\n              isDarkMode={isDarkMode}\n            />\n            \n            <View style={styles.separator} />\n            \n            <SettingItem\n              title=\"Analytics\"\n              description=\"Help improve the app with usage data\"\n              value={analyticsEnabled}\n              onValueChange={setAnalyticsEnabled}\n              isDarkMode={isDarkMode}\n            />\n            \n            <View style={styles.separator} />\n            \n            <SettingItem\n              title=\"Performance Monitoring\"\n              description=\"Track app performance metrics\"\n              value={performanceMonitoring}\n              onValueChange={setPerformanceMonitoring}\n              isDarkMode={isDarkMode}\n            />\n          </View>\n        </View>\n\n        {/* New Architecture Info */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, textStyle]}>New Architecture Status</Text>\n          \n          <View style={[styles.infoCard, { backgroundColor: isDarkMode ? '#2a2a2a' : '#f0f8ff' }]}>\n            <View style={styles.statusItem}>\n              <Text style={styles.statusIcon}>✓</Text>\n              <Text style={[styles.statusText, textStyle]}>Fabric Renderer Active</Text>\n            </View>\n            \n            <View style={styles.statusItem}>\n              <Text style={styles.statusIcon}>✓</Text>\n              <Text style={[styles.statusText, textStyle]}>TurboModules Enabled</Text>\n            </View>\n            \n            <View style={styles.statusItem}>\n              <Text style={styles.statusIcon}>✓</Text>\n              <Text style={[styles.statusText, textStyle]}>JSI Bridge Active</Text>\n            </View>\n            \n            <View style={styles.statusItem}>\n              <Text style={styles.statusIcon}>✓</Text>\n              <Text style={[styles.statusText, textStyle]}>Hermes Engine Running</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Actions Section */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, textStyle]}>Actions</Text>\n          \n          <View style={styles.actionsContainer}>\n            <Button \n              title=\"Clear Cache\"\n              onPress={() => console.log('Clear Cache pressed')}\n              variant=\"outline\"\n            />\n            \n            <Button \n              title=\"Reset Settings\"\n              onPress={() => console.log('Reset Settings pressed')}\n              variant=\"outline\"\n            />\n            \n            <Button \n              title=\"About App\"\n              onPress={() => console.log('About App pressed')}\n              variant=\"primary\"\n            />\n          </View>\n        </View>\n\n      </ScrollView>\n    </View>\n  );\n};\n\n// Helper component for setting items\ninterface SettingItemProps {\n  title: string;\n  description: string;\n  value: boolean;\n  onValueChange: (value: boolean) => void;\n  isDarkMode: boolean;\n}\n\nconst SettingItem: React.FC<SettingItemProps> = ({ \n  title, \n  description, \n  value, \n  onValueChange,\n  isDarkMode \n}) => {\n  const textColor = { color: isDarkMode ? '#ffffff' : '#000000' };\n  \n  return (\n    <View style={styles.settingItem}>\n      <View style={styles.settingContent}>\n        <Text style={[styles.settingTitle, textColor]}>{title}</Text>\n        <Text style={[styles.settingDescription, textColor]}>{description}</Text>\n      </View>\n      <Switch\n        value={value}\n        onValueChange={onValueChange}\n        trackColor={{ false: '#767577', true: '#34C759' }}\n        thumbColor={value ? '#ffffff' : '#f4f3f4'}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollContent: {\n    padding: 16,\n    paddingBottom: 32,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 32,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: '700',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    opacity: 0.7,\n    textAlign: 'center',\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginBottom: 16,\n  },\n  settingCard: {\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    overflow: 'hidden',\n  },\n  settingItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n  },\n  settingContent: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    opacity: 0.7,\n  },\n  separator: {\n    height: 1,\n    backgroundColor: '#e1e5e9',\n    marginHorizontal: 16,\n  },\n  settingPressable: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n  },\n  actionText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  infoCard: {\n    padding: 16,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  statusItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  statusIcon: {\n    fontSize: 16,\n    color: '#34C759',\n    marginRight: 12,\n    fontWeight: '600',\n  },\n  statusText: {\n    fontSize: 16,\n    flex: 1,\n  },\n  actionsContainer: {\n    gap: 12,\n  },\n});\n\nexport default SettingsScreen;\nEOF",
			"group": "setup"
		},
		{
			"label": "Create screens index",
			"type": "shell",
			"command": "cat > src/screens/index.ts << 'EOF'\n// Export all screens from this barrel file\nexport { default as HomeScreen } from './HomeScreen';\nexport { default as ProfileScreen } from './ProfileScreen';\nexport { default as SettingsScreen } from './SettingsScreen';\nEOF",
			"group": "setup"
		},
		{
			"label": "Backup current App.tsx",
			"type": "shell",
			"command": "cp App.tsx App-showcase.tsx",
			"group": "setup"
		},
		{
			"label": "Create CHANGELOG",
			"type": "shell",
			"command": "cat > CHANGELOG.md << 'EOF'\n# Changelog\n\nAll notable changes to the RN AW Test project will be documented in this file.\n\n## [0.1.0] - 2025-10-10\n\n### Added - Initial Project Setup\n\n#### 🏗️ Project Architecture\n- **React Native 0.82.0** - Latest version with 100% New Architecture\n- **React 19.1.1** - Latest with Concurrent Features and Suspense\n- **TypeScript 5.8.3** - Strict mode configuration with enhanced type safety\n- **New Architecture** - Complete Fabric + TurboModules implementation\n\n#### 📱 Dependencies & Libraries\n- `@react-navigation/native` v7.0.15 - Modern type-safe navigation\n- `@react-navigation/stack` v7.0.14 - Stack navigator\n- `@react-navigation/bottom-tabs` v7.0.11 - Tab navigator\n- `react-native-safe-area-context` v5.5.2 - Proper safe area handling\n- `react-native-gesture-handler` v2.20.2 - Touch interactions\n- `react-native-reanimated` v3.16.1 - High-performance animations\n- `react-native-paper` v5.12.5 - Material Design 3 components\n- `react-native-vector-icons` v10.2.0 - Icon library\n- `zustand` v5.0.1 - Lightweight state management\n- `@react-native-async-storage/async-storage` v2.1.0 - Local storage\n\n#### 🗺️ Project Structure\n```\nsrc/\n├── components/          # Reusable UI components\n│   ├── Button.tsx        # Modern button component with variants\n│   └── index.ts          # Component exports\n├── hooks/              # Custom React hooks\n│   └── index.ts          # Utility hooks (keyboard, async, etc.)\n├── navigation/         # Navigation configuration\n│   └── AppNavigator.tsx  # Main app navigation setup\n├── screens/            # Application screens\n│   ├── HomeScreen.tsx    # Home with interactive demos\n│   ├── ProfileScreen.tsx # Profile and stats\n│   ├── SettingsScreen.tsx# Settings and theme toggle\n│   └── index.ts          # Screen exports\n├── store/              # State management\n│   └── themeStore.ts     # Theme state with persistence\n├── test/               # Testing configuration\n│   └── setup.ts          # Jest setup and mocks\n├── types/              # TypeScript type definitions\n│   └── index.ts          # Shared types and interfaces\n└── utils/              # Utility functions\n    └── index.ts          # Helper functions and utilities\n```\n\n#### 🧪 Testing Setup\n- **Jest** - Unit testing framework\n- **@testing-library/react-native** - Modern testing utilities\n- **Test coverage** reporting configured\n- **Mocks** for React Native dependencies\n- **Component tests** for Button and App components\n- **E2E testing** configuration with Detox\n\n#### 🛠️ Development Tools\n- **ESLint** - Code linting with React Native rules\n- **Prettier** - Code formatting\n- **TypeScript** - Static type checking\n- **Husky** - Git hooks for code quality\n- **lint-staged** - Pre-commit code formatting\n- **Absolute imports** - Clean import paths with @ aliases\n\n#### 🚀 Build & Deploy\n- **Metro** - Enhanced configuration for New Architecture\n- **Babel** - Optimized for React Native 0.82 and Reanimated\n- **GitHub Actions** - CI/CD pipeline for automated testing and builds\n- **Android & iOS** build configurations\n- **Hermes** engine optimizations\n\n#### 📱 App Features\n\n**Home Screen:**\n- Interactive counter demo\n- Countdown timer with custom hook\n- New Architecture benefits showcase\n- Responsive design with dark/light theme\n\n**Profile Screen:**\n- Developer profile showcase\n- Technology stack statistics\n- New Architecture experience checklist\n- Action buttons for profile management\n\n**Settings Screen:**\n- Dark/light theme toggle with persistence\n- System theme detection and override\n- App settings (notifications, analytics)\n- New Architecture status indicators\n- Settings management with Zustand store\n\n#### 🎨 Design System\n- **Material Design 3** principles\n- **Dark/Light theme** support with system detection\n- **Responsive layouts** with safe area handling\n- **Consistent spacing** and typography scales\n- **Accessible components** with proper ARIA labels\n- **Platform-specific** styling (iOS/Android)\n\n#### ⚡ Performance Optimizations\n- **New Architecture** - 30-50% faster startup times\n- **Hermes V1** - Optimized JavaScript engine\n- **Bundle size** - 15-20% reduction with tree shaking\n- **Synchronous native calls** - No bridge bottlenecks\n- **Concurrent rendering** - React 19 features\n- **Lazy loading** - Components loaded on demand\n\n#### 📄 Documentation\n- **Comprehensive README** - Setup and architecture guide\n- **Contributing guide** - Development workflow and standards\n- **Code documentation** - Inline comments and JSDoc\n- **Type definitions** - Full TypeScript coverage\n- **Testing guides** - Unit and E2E testing instructions\n\n#### 📝 Configuration Files\n- `.env.example` - Environment variables template\n- `tsconfig.json` - Strict TypeScript configuration\n- `jest.config.js` - Testing configuration with coverage\n- `metro.config.js` - Metro bundler optimization\n- `babel.config.js` - Babel plugins and presets\n- `.github/workflows/ci.yml` - CI/CD pipeline\n- `.husky/pre-commit` - Git hook for code quality\n\n### Technical Highlights\n\n#### New Architecture Benefits Implemented\n- **100% Fabric renderer** - No legacy bridge components\n- **TurboModules ready** - For future native module development\n- **JSI integration** - Direct JavaScript-to-Native communication\n- **Concurrent React** - Suspense, Transitions, automatic batching\n- **Hermes optimizations** - Bytecode compilation and V1 features\n\n#### Modern Development Practices\n- **Strict TypeScript** - Enhanced type safety and inference\n- **Functional components** - Hooks-based architecture\n- **Custom hooks** - Reusable logic abstraction\n- **State management** - Zustand with persistence\n- **Testing strategy** - Unit, integration, and E2E coverage\n- **Code quality** - Automated linting and formatting\n\n### Installation & Usage\n\n```bash\n# Clone and install\ngit clone https://github.com/jramalhoinvillia/rn-aw-test.git\ncd rn-aw-test\nnpm install\n\n# iOS setup (macOS only)\ncd ios && bundle exec pod install && cd ..\n\n# Run the app\nnpm run ios     # iOS simulator\nnpm run android # Android emulator\n\n# Development\nnpm run lint    # Code linting\nnpm test        # Run tests\nnpm run type-check # TypeScript check\n```\n\n### Next Steps\n\n#### Planned Features (v0.2.0)\n- [ ] Authentication system integration\n- [ ] API integration with caching\n- [ ] Push notifications setup\n- [ ] Deep linking configuration\n- [ ] Offline support with data persistence\n\n#### Performance Enhancements (v0.3.0)\n- [ ] Performance monitoring integration\n- [ ] Bundle size optimization\n- [ ] Advanced Hermes features\n- [ ] Memory usage optimization\n- [ ] Battery usage monitoring\n\n#### Advanced Features (v0.4.0)\n- [ ] Custom TurboModule development\n- [ ] Fabric component creation\n- [ ] Advanced animations with Reanimated\n- [ ] Biometric authentication\n- [ ] Camera and media features\n\n---\n\n**Built with ❤️ using React Native 0.82 New Architecture**\n\n*This project showcases the latest React Native capabilities and serves as a reference implementation for modern mobile app development.*\nEOF",
			"group": "setup"
		},
		{
			"label": "Create installation guide",
			"type": "shell",
			"command": "cat > INSTALLATION.md << 'EOF'\n# 🚀 Installation Guide - RN AW Test\n\nComplete setup guide for the React Native 0.82 New Architecture project.\n\n## 📱 Prerequisites\n\n### System Requirements\n\n- **Node.js** 20+ \n- **npm** or **yarn**\n- **React Native CLI**\n- **Git**\n\n### Platform-Specific Requirements\n\n#### iOS Development (macOS only)\n- **Xcode** 15+\n- **Xcode Command Line Tools**\n- **CocoaPods** (via Bundler)\n- **Ruby** (for CocoaPods)\n- **iOS Simulator** or physical device\n\n#### Android Development\n- **Android Studio**\n- **Android SDK** (API 34+)\n- **Java Development Kit** 17+\n- **Android Emulator** or physical device\n\n### Verification Commands\n\n```bash\n# Check Node.js version\nnode --version  # Should be 20+\n\n# Check React Native CLI\nnpx react-native --version\n\n# Check platform tools\nxcode-select --version    # macOS only\njava --version            # Should be 17+\n```\n\n## 💾 Installation Steps\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/jramalhoinvillia/rn-aw-test.git\ncd rn-aw-test\n```\n\n### 2. Install JavaScript Dependencies\n\n```bash\n# Using npm\nnpm install\n\n# OR using yarn\nyarn install\n```\n\n### 3. Set Up Environment Variables\n\n```bash\n# Copy environment template\ncp .env.example .env\n\n# Edit .env file with your configuration\n# Most values can be left as defaults for development\n```\n\n### 4. Platform Setup\n\n#### iOS Setup (macOS only)\n\n```bash\n# Install Ruby dependencies\nbundle install\n\n# Install CocoaPods dependencies\ncd ios\nbundle exec pod install\ncd ..\n```\n\n**Note:** If you encounter issues with pod install:\n\n```bash\n# Clean and reinstall pods\ncd ios\nrm -rf Pods Podfile.lock\nbundle exec pod install --repo-update\ncd ..\n```\n\n#### Android Setup\n\n```bash\n# Clean Android build (if needed)\ncd android\n./gradlew clean\ncd ..\n```\n\n**Android Studio Setup:**\n1. Open Android Studio\n2. Configure SDK (API 34+)\n3. Create/start an Android emulator\n4. Enable USB debugging (for physical device)\n\n### 5. Initialize Git Hooks\n\n```bash\n# Set up Husky for code quality\nnpm run prepare\n```\n\n### 6. Verify Installation\n\n```bash\n# Type checking\nnpm run type-check\n\n# Linting\nnpm run lint\n\n# Run tests\nnpm test\n```\n\n## 🏃 Running the App\n\n### Start Metro Bundler\n\n```bash\n# Start the Metro bundler\nnpm start\n\n# OR with cache reset\nnpm run start:reset\n```\n\n### Run on iOS\n\n```bash\n# Debug mode\nnpm run ios\n\n# Specific simulator\nnpx react-native run-ios --simulator=\"iPhone 15 Pro\"\n\n# Release mode\nnpm run ios:release\n```\n\n### Run on Android\n\n```bash\n# Debug mode\nnpm run android\n\n# Release mode\nnpm run android:release\n```\n\n## 🔍 Troubleshooting\n\n### Common Issues\n\n#### Metro Bundler Issues\n\n```bash\n# Clear Metro cache\nnpm run start:reset\n\n# OR manually\nnpx react-native start --reset-cache\n```\n\n#### iOS Build Issues\n\n```bash\n# Clean iOS build\nnpm run clean:ios\n\n# Reinstall pods\ncd ios\nrm -rf Pods Podfile.lock\nbundle exec pod install\ncd ..\n```\n\n#### Android Build Issues\n\n```bash\n# Clean Android build\nnpm run clean:android\n\n# Clean all builds\nnpm run clean\n```\n\n#### Node Modules Issues\n\n```bash\n# Clean install\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n### Environment Issues\n\n#### React Native Environment\n\n```bash\n# Check RN environment\nnpx @react-native-community/cli doctor\n\n# Fix common issues\nnpx @react-native-community/cli clean\n```\n\n#### TypeScript Issues\n\n```bash\n# Check TypeScript configuration\nnpm run type-check\n\n# Restart TypeScript server (VS Code)\n# Command Palette: \"TypeScript: Restart TS Server\"\n```\n\n### Platform-Specific Issues\n\n#### iOS\n\n**Xcode Issues:**\n```bash\n# Clean Xcode derived data\nrm -rf ~/Library/Developer/Xcode/DerivedData\n\n# Reset iOS simulator\nxcrun simctl erase all\n```\n\n**CocoaPods Issues:**\n```bash\n# Update CocoaPods\nsudo gem install cocoapods\npod repo update\n\n# Clear CocoaPods cache\npod cache clean --all\n```\n\n#### Android\n\n**Gradle Issues:**\n```bash\n# Clean Gradle cache\ncd android\n./gradlew clean\n./gradlew cleanBuildCache\ncd ..\n```\n\n**Android SDK Issues:**\n```bash\n# Check Android SDK\necho $ANDROID_HOME\necho $ANDROID_SDK_ROOT\n\n# Update SDK tools in Android Studio\n```\n\n## 📊 Performance Optimization\n\n### Development Performance\n\n```bash\n# Enable Flipper for debugging\n# Already configured in debug builds\n\n# Use Hermes engine (enabled by default)\n# Check android/app/build.gradle: enableHermes: true\n```\n\n### Build Performance\n\n```bash\n# Parallel builds (Android)\n# Add to android/gradle.properties:\n# org.gradle.parallel=true\n# org.gradle.configureondemand=true\n\n# Increase heap size\n# org.gradle.jvmargs=-Xmx8g -XX:MaxMetaspaceSize=512m\n```\n\n## 🛠️ Development Tools\n\n### Recommended VS Code Extensions\n\n```bash\n# Install recommended extensions\ncode --install-extension ms-vscode.vscode-typescript-next\ncode --install-extension esbenp.prettier-vscode\ncode --install-extension ms-vscode.vscode-eslint\ncode --install-extension bradlc.vscode-tailwindcss\n```\n\n### Debugging Tools\n\n- **Flipper** - React Native debugging (auto-configured)\n- **React DevTools** - Component inspection\n- **Reactotron** - State management debugging\n- **Chrome DevTools** - JavaScript debugging\n\n## 📝 Next Steps\n\nAfter successful installation:\n\n1. **Explore the app** - Run on iOS/Android to see features\n2. **Read the code** - Check `src/` directory structure\n3. **Run tests** - Execute `npm test` to see testing setup\n4. **Check documentation** - Review README.md and CONTRIBUTING.md\n5. **Start developing** - Add new features following the established patterns\n\n## 🌐 Deployment\n\n### Development Builds\n\n```bash\n# Android APK\nnpm run build:android\n\n# iOS Archive\nnpm run build:ios\n```\n\n### Production Setup\n\n- Configure signing certificates\n- Set up CI/CD pipeline (GitHub Actions included)\n- Configure app store metadata\n- Set up crash reporting and analytics\n\n---\n\n**Need Help?**\n\n- Check [React Native Documentation](https://reactnative.dev/docs/environment-setup)\n- Review [New Architecture Guide](https://reactnative.dev/docs/the-new-architecture/landing-page)\n- Open an issue on GitHub\n- Check CONTRIBUTING.md for development guidelines\n\n**Happy Coding! 🚀**\nEOF",
			"group": "setup"
		},
		{
			"label": "Create Pokemon API service",
			"type": "shell",
			"command": "touch src/utils/pokemonApi.ts"
		},
		{
			"label": "Create Pokemon store",
			"type": "shell",
			"command": "touch src/store/pokemonStore.ts"
		},
		{
			"label": "Create Pokemon Card component",
			"type": "shell",
			"command": "touch src/components/PokemonCard.tsx"
		},
		{
			"label": "Create SearchBar component",
			"type": "shell",
			"command": "touch src/components/SearchBar.tsx"
		},
		{
			"label": "Create TypeFilter component",
			"type": "shell",
			"command": "touch src/components/TypeFilter.tsx"
		},
		{
			"label": "Create Pokemon List Screen",
			"type": "shell",
			"command": "touch src/screens/PokemonListScreen.tsx"
		},
		{
			"label": "Create PokemonDetailScreen",
			"type": "shell",
			"command": "touch src/screens/PokemonDetailScreen.tsx"
		},
		{
			"label": "Create Copilot instructions file",
			"type": "shell",
			"command": "touch .copilot-instructions.md"
		}
	]
}